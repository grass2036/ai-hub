# AI Hub Platform - High Availability Docker Compose Configuration
# Week 6 Day 5: 负载均衡和高可用配置

version: '3.8'

services:
  # 主应用服务 (多实例)
  app-1:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    container_name: ai-hub-app-1
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - NODE_ID=app-node-1
      - DISCOVERY_SERVERS=app-node-1:8001,app-node-2:8001,app-node-3:8001
      - QUORUM_SIZE=2
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8001:8001"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  app-2:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    container_name: ai-hub-app-2
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - NODE_ID=app-node-2
      - DISCOVERY_SERVERS=app-node-1:8001,app-node-2:8001,app-node-3:8001
      - QUORUM_SIZE=2
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8002:8001"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  app-3:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    container_name: ai-hub-app-3
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - NODE_ID=app-node-3
      - DISCOVERY_SERVERS=app-node-1:8001,app-node-2:8001,app-node-3:8001
      - QUORUM_SIZE=2
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8003:8001"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务 (多实例)
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-hub-frontend-1
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx:80/api/v1
    ports:
      - "3001:3000"
    depends_on:
      - nginx
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-2:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-hub-frontend-2
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx:80/api/v1
    ports:
      - "3002:3000"
    depends_on:
      - nginx
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: ai-hub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.ha.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app-1
      - app-2
      - app-3
      - frontend-1
      - frontend-2
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 主数据库
  postgres-primary:
    image: postgres:15-alpine
    container_name: ai-hub-postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aihub
      - POSTGRES_USER=aihub
      - POSTGRES_PASSWORD=password
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./deployment/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./deployment/postgres/primary-setup.sh:/docker-entrypoint-initdb.d/primary-setup.sh
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aihub"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL 从数据库
  postgres-replica:
    image: postgres:15-alpine
    container_name: ai-hub-postgres-replica
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aihub
      - POSTGRES_USER=aihub
      - POSTGRES_PASSWORD=password
      - PGUSER=aihub
      - POSTGRES_MASTER_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replpassword
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./deployment/postgres/replica-setup.sh:/docker-entrypoint-initdb.d/replica-setup.sh
    depends_on:
      - postgres-primary
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aihub"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 集群
  redis-cluster:
    image: redis:7-alpine
    container_name: ai-hub-redis-cluster
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 哨兵
  redis-sentinel:
    image: redis:7-alpine
    container_name: ai-hub-redis-sentinel
    restart: unless-stopped
    ports:
      - "26379:26379"
    volumes:
      - ./deployment/redis/sentinel.conf:/etc/redis/sentinel.conf
    command: redis-sentinel /etc/redis/sentinel.conf
    depends_on:
      - redis-cluster
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-hub-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: ai-hub-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy 负载均衡器 (备选方案)
  haproxy:
    image: haproxy:alpine
    container_name: ai-hub-haproxy
    restart: unless-stopped
    ports:
      - "8404:8404"  # Stats页面
      - "8080:80"    # HTTP负载均衡
    volumes:
      - ./deployment/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./logs/haproxy:/var/log/haproxy
    depends_on:
      - app-1
      - app-2
      - app-3
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keepalived 高可用
  keepalived:
    image: osixia/keepalived:latest
    container_name: ai-hub-keepalived
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
    volumes:
      - ./deployment/keepalived/keepalived.conf:/etc/keepalived/keepalived.conf:ro
      - ./deployment/keepalived/check_nginx.sh:/etc/keepalived/check_nginx.sh:ro
    environment:
      - KEEPALIVED_INTERFACE=eth0
      - KEEPALIVED_PRIORITY=150
      - KEEPALIVED_PASSWORD=aihubha
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "pgrep", "keepalived"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch 日志存储
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-hub-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-hub-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash 日志处理
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ai-hub-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./deployment/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./deployment/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logs:/var/log/app
    depends_on:
      - elasticsearch
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-hub-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp" # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ai-hub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ai-hub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16