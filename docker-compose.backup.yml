# AI Hub Platform - Backup and Recovery Docker Compose Configuration
# Week 6 Day 6: 备份恢复策略实施

version: '3.8'

services:
  # 主应用服务（备份配置）
  app-backup:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    container_name: ai-hub-app-backup
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # 备份配置
      - BACKUP_STORAGE_TYPE=local
      - BACKUP_STORAGE_PATH=/app/backups
      - BACKUP_SCHEDULE_ENABLED=true
      - BACKUP_RETENTION_DAYS=30
      - DISASTER_RECOVERY_ENABLED=true
    volumes:
      - ./data:/app/data
      - ./backups:/app/backups
      - ./logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 主数据库（备份配置）
  postgres-primary:
    image: postgres:15-alpine
    container_name: ai-hub-postgres-backup
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aihub
      - POSTGRES_USER=aihub
      - POSTGRES_PASSWORD=password
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_backup_data:/var/lib/postgresql/data
      - postgres_backup_wals:/var/lib/postgresql/wal
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./deployment/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./deployment/postgres/backup-script.sh:/docker-entrypoint-initdb.d/backup-script.sh
    networks:
      - backup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aihub"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 集群（备份配置）
  redis-cluster:
    image: redis:7-alpine
    container_name: ai-hub-redis-backup
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_backup_data:/data
      - redis_backup_wals:/var/lib/redis/wal
      - ./deployment/redis/redis-backup.conf:/etc/redis/redis.conf
      - ./deployment/redis/backup-script.sh:/usr/local/bin/backup-redis.sh
    command: redis-server /etc/redis/redis.conf --save 900 1 --save 300 10 --save 60 10000
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 备份存储服务
  backup-storage:
    image: minio/minio:latest
    container_name: ai-hub-backup-storage
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_DOMAIN=backup-storage
    volumes:
      - minio_backup_data:/data
    command: server /data --console-address ":9001"
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 备份调度器
  backup-scheduler:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backup
    container_name: ai-hub-backup-scheduler
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - BACKUP_STORAGE_TYPE=s3
      - BACKUP_S3_ENDPOINT=http://backup-storage:9000
      - BACKUP_S3_ACCESS_KEY=minioadmin
      - BACKUP_S3_SECRET_KEY=minioadmin123
      - BACKUP_S3_BUCKET=aihub-backups
      - BACKUP_SCHEDULE_CRON=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
    volumes:
      - ./backups:/app/backups
      - ./logs/backup:/app/logs
    depends_on:
      - backup-storage
      - postgres-primary
      - redis-cluster
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 备份监控
  backup-monitor:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backup
    container_name: ai-hub-backup-monitor
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - MONITOR_TYPE=backup
      - BACKUP_STORAGE_ENDPOINT=http://backup-storage:9000
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
    volumes:
      - ./logs/monitor:/app/logs
    depends_on:
      - backup-storage
      - backup-scheduler
    networks:
      - backup-network
    command: ["python", "-m", "backup_monitor"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 恢复服务
  recovery-service:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backup
    container_name: ai-hub-recovery-service
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SERVICE_TYPE=recovery
      - BACKUP_STORAGE_ENDPOINT=http://backup-storage:9000
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - RECOVERY_TARGET_PATH=/app/recovery
    volumes:
      - ./recovery:/app/recovery
      - ./logs/recovery:/app/logs
    depends_on:
      - backup-storage
      - postgres-primary
      - redis-cluster
    networks:
      - backup-network
    command: ["python", "-m", "recovery_service"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 灾难恢复管理器
  disaster-recovery:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backup
    container_name: ai-hub-disaster-recovery
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SERVICE_TYPE=disaster_recovery
      - BACKUP_STORAGE_ENDPOINT=http://backup-storage:9000
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - DR_AUTO_RECOVERY=false
      - DR_RPO_MINUTES=60
      - DR_RTO_MINUTES=240
      - NOTIFICATION_EMAIL=${DR_NOTIFICATION_EMAIL}
      - NOTIFICATION_WEBHOOK=${DR_NOTIFICATION_WEBHOOK}
    volumes:
      - ./disaster-recovery:/app/dr
      - ./logs/dr:/app/logs
    depends_on:
      - backup-storage
      - postgres-primary
      - redis-cluster
    networks:
      - backup-network
    command: ["python", "-m", "disaster_recovery"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 备份验证服务
  backup-validator:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backup
    container_name: ai-hub-backup-validator
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - SERVICE_TYPE=validator
      - BACKUP_STORAGE_ENDPOINT=http://backup-storage:9000
      - DATABASE_URL=postgresql://aihub:password@postgres-primary:5432/aihub
      - REDIS_URL=redis://redis-cluster:6379/0
      - VALIDATION_SCHEDULE=0 4 * * *  # 每天凌晨4点验证备份
    volumes:
      - ./logs/validator:/app/logs
    depends_on:
      - backup-storage
      - backup-scheduler
    networks:
      - backup-network
    command: ["python", "-m", "backup_validator"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 日志聚合服务
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: ai-hub-log-aggregator
    restart: unless-stopped
    ports:
      - "24224:24224"
    volumes:
      - ./deployment/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./logs:/var/log/app
      - ./logs/backup:/var/log/backup
      - ./logs/recovery:/var/log/recovery
      - ./logs/dr:/var/log/dr
      - ./logs/validator:/var/log/validator
    networks:
      - backup-network
    depends_on:
      - backup-storage

  # 监控和告警
  backup-prometheus:
    image: prom/prometheus:latest
    container_name: ai-hub-backup-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/backup/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/backup/rules:/etc/prometheus/rules
      - prometheus_backup_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  backup-grafana:
    image: grafana/grafana:latest
    container_name: ai-hub-backup-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=backup123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_backup_data:/var/lib/grafana
      - ./monitoring/backup/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/backup/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - backup-prometheus
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 备份API网关
  backup-api-gateway:
    image: nginx:alpine
    container_name: ai-hub-backup-api-gateway
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./deployment/nginx/backup.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app-backup
      - backup-scheduler
      - recovery-service
      - disaster-recovery
    networks:
      - backup-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_backup_data:
    driver: local
  postgres_backup_wals:
    driver: local
  redis_backup_data:
    driver: local
  redis_backup_wals:
    driver: local
  minio_backup_data:
    driver: local
  prometheus_backup_data:
    driver: local
  grafana_backup_data:
    driver: local

networks:
  backup-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16